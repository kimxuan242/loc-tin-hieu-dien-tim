Tải tín hiệu
ECG và
FFT tính
hiệu
clc;
clear all;
close all;
[fileNames, pathName] = uigetfile('*.csv', 'Select CSV Files',
'MultiSelect', 'on');
if ischar(fileNames)
 fileNames = {fileNames};
end
allData = [];
for i = 1:length(fileNames)
 fullFileName = fullfile(pathName, fileNames{i});
 % Import the data from the current file
 data = importfile(fullFileName, 1, 10000);
 dataArray = table2array(data(:,1));
 allData = [allData; dataArray];
end
fs = 500;
t = (0:length(allData)-1) / fs;
%FFT
n_y_data = length(allData);
y_fft0_data = fft(allData, n_y_data);
y_f_data = y_fft0_data(1:n_y_data/2);
x_fft_data = fs*(0:n_y_data/2-1)/n_y_data;
Lọc thông
thấp tần số
cắt 50Hz
loc0 = locThongThap(500,50,4);
loc_TT = filter(loc0,allData);
%FFT loc thong thap
26
n_y_TT = length(loc_TT);
y_fft0_TT = fft(loc_TT, n_y_TT);
y_f_TT = y_fft0_TT(1:n_y_TT/2);
x_fft_TT = fs*(0:n_y_TT/2-1)/n_y_TT;
Lọc Notch %loc Notch
loc1 = loc_notch(500,50.35,5,3);%fs fc BW apass
loc_N = filter(loc1,loc_TT);
%FFT loc Notch
n_y_N = length(loc_N);
y_fft0_N = fft(loc_N, n_y_N);
y_f_N = y_fft0_N(1:n_y_N/2);
x_fft_N = fs*(0:n_y_N/2-1)/n_y_N;
Lọc thông
cao
loc2 = locThongCao(500,0.5,4);%fs,fc,N
loc_TC = filter(loc2,loc_N);
%FFT loc thong cao
n_y_TC = length(loc_TC);
y_fft0_TC = fft(loc_TC, n_y_TC);
y_f_TC = y_fft0_TC(1:n_y_TC/2);
x_fft_TC = fs*(0:n_y_TC/2-1)/n_y_TC;
Phát hiện
đỉnh R
% Tính dao hàm
ecg_diff = diff(loc_TC);
t_diff = t(1:end-1);
% Bình phuong (Squaring)
ecg_squared = ecg_diff .^ 2;
% Trung bình truot (Moving average)
window_size = round(0.15 * fs);
27
ecg_moving_avg = movmean(ecg_squared, window_size);
% nguong R
threshold = max(ecg_moving_avg) * 0.5;
[~, rough_peaks1] = findpeaks(ecg_moving_avg, 'MinPeakHeight',
threshold);
% Xac dinh dinh R chính xác tu tin hieu goc
r_peaks1 = [];
for i = 1:length(rough_peaks1)
 search_window1 = max(1, rough_peaks1(i)-250) :
min(length(loc_TC), rough_peaks1(i)+250);
 [~, local_max_idx1] = max(loc_TC(search_window1));
 r_peak_idx1 = search_window1(local_max_idx1);
 r_peaks1 = [r_peaks1; r_peak_idx1];
end
Tính toán
tần số nhịp
tim
%tinh toan
khoangR_R = diff(r_peaks1) / fs;
% Hien thi ket qua
disp('RR intervals (seconds):');
%Loai bo cac khoang thoi gian bang 0
khoangR_R = khoangR_R (khoangR_R > 0);
%disp(khoangR_R);
%chon so dinh R
so_khoang_R = input('nhap so khoang R: ');
if so_khoang_R > 0 && so_khoang_R <= length(khoangR_R)
 disp(['Khoang thoi gian giua ' num2str(so_khoang_R) ' dinh R
dau tien (giay):']);
 disp(khoangR_R(1:so_khoang_R));
end
28
%Tinh tan so tim giua cac khoang R da chon
 F_so_khoang_RR = khoangR_R(1:so_khoang_R);
 heart_rate = 60 / mean(F_so_khoang_RR);
 disp(['Tan so tim (lan/phut) ', num2str(so_khoang_R), ' khoang
RR: ', num2str(heart_rate)]);
% Tan so tim (l?n/phút)
heart_rate1 = 60 / mean(khoangR_R);
disp(['Tan so tim TB (lan/phut): ', num2str(heart_rate1)]);
Bộ lọc
thông thấp
function Hd = locThongThap(Fs,Fc,N)
%LOCTHONGTHAP Returns a discrete-time filter object.
% MATLAB Code
% Generated by MATLAB(R) 9.3 and Signal Processing Toolbox
7.5.
% Generated on: 08-Jun-2024 12:20:45
% Butterworth Lowpass filter designed using
FDESIGN.LOWPASS.
% All frequency values are in Hz.
% Fs = 500; % Sampling Frequency
%
% N = 75; % Order
% Fc = 50; % Cutoff Frequency
% Construct an FDESIGN object and call its BUTTER method.
h = fdesign.lowpass('N,F3dB', N, Fc, Fs);
Hd = design(h, 'butter');
% [EOF]
Bộ lọc
Notch
function Hd = loc_notch(Fs,Fnotch,BW,Apass)
%LOC_NOTCH Returns a discrete-time filter object.
29
% MATLAB Code
% Generated by MATLAB(R) 9.3 and DSP System Toolbox 9.5.
% Generated on: 08-Jun-2024 12:36:48
% IIR Notching filter designed using the IIRNOTCH function.
% All frequency values are in Hz.
% Fs = 500; % Sampling Frequency
%
% Fnotch = 50.35; % Notch Frequency
% BW = 10; % Bandwidth
% Apass = 1; % Bandwidth Attenuation
[b, a] = iirnotch(Fnotch/(Fs/2), BW/(Fs/2), Apass);
Hd = dfilt.df2(b, a);
% [EOF]
Bộ lọc
thông cao
function Hd = locThongCao(Fs,Fc,N);
%LOCTHONGCAO Returns a discrete-time filter object.
% MATLAB Code
% Generated by MATLAB(R) 9.3 and DSP System Toolbox 9.5.
% Generated on: 08-Jun-2024 12:49:32
% Butterworth Highpass filter designed using
FDESIGN.HIGHPASS.
% All frequency values are in Hz.
% Fs = 500; % Sampling Frequency
%
% N = 120; % Order
% Fc = 0.5; % Cutoff Frequency
% Construct an FDESIGN object and call its BUTTER method.
h = fdesign.highpass('N,F3dB', N, Fc, Fs);
Hd = design(h, 'butter');
% [EOF]